server:
  port: 8089

spring:
  application:
    name: thymeleaf_demo

# Allow Thymeleaf templates to be reloaded at dev time
  thymeleaf:
    cache: false
    mode: html

  datasource:
#    test使用，使用h2数据库
    url: jdbc:h2:~/test1;MODE=MYSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=TRUE
    username: sa
    password: 123456
    driver-class-name: org.h2.Driver

#### Database for MySQL ###
#    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://localhost:3306/test?autoReconnect=true
#    username: ******
#    password: ******
#    driver-class-name: com.mysql.jdbc.Driver
## 下面为连接池的补充设置，应用到上面所有数据源中
## 初始化大小，最小，最大
#    initialSize: 5
#    minIdle: 5
#    maxActive: 20
## 配置获取连接等待超时的时间
#    maxWait: 60000
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#    timeBetweenEvictionRunsMillis: 60000
## 配置一个连接在池中最小生存的时间，单位是毫秒
#    minEvictableIdleTimeMillis: 300000
#    validationQuery: SELECT 1 FROM DUAL
#    testWhileIdle: true
#    testOnBorrow: false
#    testOnReturn: false
## 打开PSCache，并且指定每个连接上PSCache的大小
#    poolPreparedStatements: true
#    maxPoolPreparedStatementPerConnectionSize: 20
## 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#    filters: stat,wall
## 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
#    connectionInitSqls: 'set names utf8mb4;'
#  redis:
#    host: 192.168.1.100
#    port: 6379
#    database: 0
#    pool:
#      max-active: 100
#      max-idle: 20
#      max-wait: 5000

# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

### MyBatis ### 也可以设置mapper-locations:classpath*:mapper/*Mapper.xml mapper文件夹在resources文件夹下
mybatis:
  mapper-locations: classpath*:com/yy/sql/mapper/*Mapper.xml
  type-aliases-package: com.yy.mapper

### Logging ###
# Log levels (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging:
  config: classpath:logback.xml
  level:
    root: info
    org.springframework: INFO
    org.springframework.web: INFO
    org.mybatis: INFO
    org.apache.http.client: ERROR
    org.springframework.transaction: info
    org.springframework.aop: info
# File output
#logging.file=api.log








